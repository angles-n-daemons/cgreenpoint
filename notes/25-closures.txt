did a little work setting up testing for greenpoint files

I also setup some syntax highlighting using kotlin as it has a similar syntax


So it seems as if some of the discussion on this seems to describe closures not working on the stack

Why wouldn't they though, if you could possibly keep the right values on the stack wouldn't they appropriately close over the values?

Why do we need our own object type? why not identify closed variables and keep them on the stack? Is that what we're going to do?

So it seems as if th enext stage in this adventure is to push closed variables onto the stack? Or to push closures rather onto the constants list

Is the constants table a list?

Constants is a list

When reading constants, the address is pushed directly onto the code

Curious. I wonder if the compiler is smart enough to de-duplicate constants

So the functions themselves are pushed onto the stack

After the function is pushed onto the stack, it's called by retrieving it's value on the stack

When a function returns, it changes the stackTop to the start of the stack before the function was called

[1, fn, 5, 10]
(5 and 10 are arguments)

stacktop would have to be fn

Though I'm not totally sure

Okay so yeah confirmed, after the function returns the stackTop goes to the value right before the function in the stack

In the above example, after the return the stackTop would be 1

greenpoint old code
== inner ==
0000   14 OP_GET_UPVALUE      0
0002    | OP_PRINT
0003   15 OP_NIL
0004    | OP_RETURN
== outer ==
0000   12 OP_CONSTANT         0 'outside'
0002   15 OP_CLOSURE       1 <fn inner>
0004      |                     local 2
-- missing OP_GET_LOCAL
0006    | OP_CALL             0
0008    | OP_POP
0009   17 OP_NIL
0010    | OP_RETURN
== <script> ==
0000   17 OP_CLOSURE       1 <fn outer>
0002      |                     local 0
-- remove 0004   18 OP_GET_UPVALUE      1 SHOULD NOT BE HERE
-- missing OP_DEFINE_GLOBAL
-- missing OP_GET_GLOBAL
0006    | OP_CALL             0
0008    | OP_POP
0009   19 OP_NIL
0010    | OP_RETURN



lox compiler code:
== inner ==
0000    4 OP_GET_UPVALUE      0
0002    | OP_PRINT
0003    5 OP_NIL
0004    | OP_RETURN
== outer ==
0000    2 OP_CONSTANT         0 'outside'
0002    5 OP_CLOSURE          1 <fn inner>
0004      |                     local 1
0006    6 OP_GET_LOCAL        2
0008    | OP_CALL             0
0010    | OP_POP
0011    7 OP_NIL
0012    | OP_RETURN
== <script> ==
0000    7 OP_CLOSURE          1 <fn outer>
0002    | OP_DEFINE_GLOBAL    0 'outer'
0004    8 OP_GET_GLOBAL       2 'outer'
0006    | OP_CALL             0
0008    | OP_POP
0009    9 OP_NIL
0010    | OP_RETURN

greenpoint code:
== inner ==
0000   14 OP_GET_UPVALUE      0
0002    | OP_PRINT
0003   15 OP_NIL
0004    | OP_RETURN
== outer ==
0000   12 OP_CONSTANT         0 'outside'
0002   15 OP_CLOSURE       1 <fn inner>
0004      |                     local 1
0006   16 OP_GET_LOCAL        2
0008    | OP_CALL             0
0010    | OP_POP
0011   17 OP_NIL
0012    | OP_RETURN
== <script> ==
0000   17 OP_CLOSURE       1 <fn outer>
0002    | OP_DEFINE_GLOBAL    0 'outer'
0004   18 OP_GET_UPVALUE      1
0006    | OP_CALL             0
0008    | OP_POP
0009   19 OP_NIL
0010    | OP_RETURN


okay so at this point the count of code is 4

byte for OP_GET_LOCAL is 0x06

Both issues were that I was to be returning -1 from resolveClosure when I instead returned 1

Need to be more careful about that

Issue now is that the application gets to freeObjects and it has a segmentation fault

Could be with freeObject getting called for something

Seems to be related to closure allocation and deallocation

A helpful way to see the issue is to attach a debugger to the place where freeObjects(vm.objects) is called, then to inspect the object.type and next.type in the loop


Next thing perhaps to look at is the closure allocation to see what its next value is when set

The memory addresses for these types are coming up DEAD (which seems to indicate they've been freed)

I was meant to use ALLOCATE(ObjUpvalue, count) instead of ALLOCATE_OBJ

By tripping myself up here I was allocating an unknown type, perhaps the wrong type

Man C errors are really challenging to debug

Start at 25.4, last place left off
