run is the most important function in the vm

it's pretty simple, there's an outer loop that reads an executes single byte instructions

to process an instruction, we first find out what kind of instruction we're dealing with

READ_BYTE reads the first byte currently pointed at by ip and then advances the instruction pointer

the first byte of any instruction is the opcode

given a numeric opcode, we need to get to the right C code that implements that instructions semantics. this process is called decoding or dispatching the instruction.


we do that for every singel instruciton, every single time one is exeucted, so this is the most performance critical part of the entire virtual machine

programming language lore is filled with clever techniques to do bytecode dispatch efficiently, going all the way back to the early days of computers

alas the fastest solutions require either non-standard extensions to c or handwritten assembly

for cgreenpoint we'll keep it simple, just like our disassembler we have a giant switch statement with a case for each opcode

the body of each case implements that opcode's behavior

so far we handle only a single instruction: OP_RETURN and the only thing it does is exit the loop entirely

eventually that'll be used to return from the current lox function, but we don't have functions yet so we'll repurpose it temporarily to end the execution

Let's go ahead and supoprt our one other instruction

If you run cgreenpoint now, it executes the chunk we hand authored in the last chapter and spits out 1.2 to your terminal.

we can see it's working but that's  only because our implemntation of OP_CONSTANT has temporary code to log the value

once the instruction is doing what it's supposed to, and plumbing that constant along to other ops that want to consume it - the vm will become a black box

that will make our lives harrder

to help ourselves out, now is a good time to add some diagnostic logging to the vm like we did with the chunks themselves. in fact we'll even reuse the same code

we don't want this logging enabled all the time - it's just for us v hackers not lox users so first we create a flag to hide it behind

$ a value stack manipulator

In addition to imperative side effects, lox has expresions that produce, modify and consume values. Therefore our compiled code needs way to shuttle values

for example: print 3-2

we obviously need instructions for 3 and 2, the print statement and the subtraction. how does the subtraction instruction know that 3 is the minus end and the 2 is the subtrahend? how does the print instruction know to use the result

fun echo(n) {
  print n;
	return n;
}

print (echo(echo(1) + echo(2)) + echo((echo(4) + echo(5))))


