allocating a new hash table each time you enter a block or call a function is not a great route for a fast vm

Given how much code is concerned with the variables, if the variables are slow then everything is slow for cgreenpoint we'll improve that by using a much more efficient strategy for local variables, but globals aren't as easily optimized

Global variables in greenpoint are late bound or resolved dynamically. that means you can compile a chunk of code that refers to a global variable before its defined

As long as the code doesn't execute before the definition happens, everything is fine. in practice that means you can refer to later variables inside the body of functions

code like that might seem odd, but it's handy for defining mutually recursive functions. it also plays nicer with the repl

you can write a function on one line, then define the variable on the next

Local variables work a little differently, since a local variable's declaration always occurs before it is used, the vm can resovle them at compile time, even in a simple single pass compiler.

That will let us use a smarter representation for locals. That's in the next chapter though

For now let's worry about globals

Variables come into being using variable declarations, which means now is also a time to add support for statements to our compiler. As you recall, greenpoint splits statements into two categories.Declarations, are those that bind a new name to a vale. The other kinds of statements, control flow, print, etc are just called statements. we disallow declarations directly inside control flow statements, like this:

if (monday) var croissant = "yes"; // Errors out

Allowing it would raise confusing questions aroudn the scope of the variable.

So like other languages, we prohibit it syntactically by having a separate grammar rule for the subset of statements that are allowed inside a control flow body.

statement -> exprStmt
          | forStmt
					| ifStmt
					| printStmt
					| block


decl -> clasDecl
     | funDecl
		 | varDecl
		 statement;

you can put declarations inside block statements

In this chapter, we'll only cover a couple of statements and one declaration

statement -> exprStmt
          |  printStmt

declaration -> varDecl
            |  statement


We'll get to variable declarations later in the chapter, so for right now let's just work on h

Note that nothing is pushed after we pop for printing

Each bytecode instruction has a stack effect that describes how the instruction modifies the stack.

For example, ADD pops two and pushes one

Each expression leaves one result on the stack

The bytecode for an entire statement has a stack effect of 0. Since a statement produces no values, it leaves the stack unchanged - thgough int of course uses the stack while it's doing its thing. This is important when we get to control frlow and looping

We can also delete the return handler, now that we have statements and print wee don't need 

NOTE: for the statment, we're printing the compiled expression, which means we don't need it after the print

The bus error is back.
It looks like the stack isn't initialized correctly;

Global variables kinda work, but it looks like there's an error in retrieving them

So it looks like the stack seems like the stack stays empty the next time I push something

Looks like I was popping on return which was causing an issue

To fix this, I removed the pop and put an error in for if I try to pop an empty stack

Througout this book, we've tried to stay on a safe and easy path. WE don't avoid hard problems, but we try to make solutions as simple as they need to be.

Alas other design choices in our bytecode compiler make assignment annoying to implement

Our bytecode uses a single pass compiler. it parses and generates bytecode on the fly without an intermediate ast.

As soon as it recognizes a piece of syntax, it emits code for it. Assignment doesn't naturally fit that.

Consider:

menu.brunch(sunday).beverage = "mimosa"

In this code, the parser doesn't realize that menu.brunch(sunday).beverate is the target of an assignment and not a normal expression until it reaches =, many tokens after the first menu. By then the compiler has already emitted bytecode for the whole thing

The problem is not as dire as it might seem though. Look at how the parser sees that example:

Even though the .beverage part must not be compiled as a get expression

Fortuantely for us, the only semantic differences on the left side of an assignment at the very right most end of the tokens, immediately preceeding the =

Even though the receiver of a setter may be an arbitrarily long expression, the part whose behavior differs from a get expression is only the trailing identifier, which is right before the =

We don't need much lookahead to realize the beverage should be compiled as a set expression and not a getter.

Variables are even easier since they are just a single bare identifier before an =. The idea then is that right before compiling an expression that can also be used as an assignment target, we look for a subsequent = token. If we see one, we compile it as an assignment or setter instead of a variable access or getter.


